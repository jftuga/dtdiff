package main

import (
	"bufio"
	"bytes"
	"fmt"
	"github.com/jftuga/dtdiff"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
	"os"
	"strings"
)

// this constant was generated by ChatGPT and then manually refined
const usageTemplate string = `Usage:{{if .Runnable}}
 {{.UseLine}}{{end}}{{if .HasAvailableSubCommands}}
 {{.CommandPath}} [command]{{end}}{{if gt (len .Aliases) 0}}
Aliases:
 {{.NameAndAliases}}{{end}}{{if .HasExample}}
Examples:
 {{.Example}}{{end}}{{if .HasAvailableSubCommands}}
Available Commands:{{range .Commands}}{{if (or .IsAvailableCommand (eq .Name "help"))}}
 {{rpad .Name .NamePadding }} {{.Short}}{{end}}{{end}}{{end}}{{if .HasAvailableLocalFlags}}

Globals:
{{FlagUsagesCustom .LocalFlags "nonewline" "help" "version" | trimTrailingWhitespaces}}{{end}}{{if .HasAvailableLocalFlags}}

Flag Group 1 (mutually exclusive with Flag Group 2):
{{FlagUsagesCustom .LocalFlags "start" "end" "stdin" | trimTrailingWhitespaces}}

Flag Group 2:
{{FlagUsagesCustom .LocalFlags "from" "add" "sub" | trimTrailingWhitespaces}}{{end}}{{if .HasAvailableInheritedFlags}}

Global Flags:
 {{.InheritedFlags.FlagUsages | trimTrailingWhitespaces}}{{end}}{{if .HasHelpSubCommands}}
Additional help topics:{{range .Commands}}{{if .IsAdditionalHelpTopicCommand}}
 {{rpad .CommandPath .CommandPathPadding}} {{.Short}}{{end}}{{end}}{{end}}{{if .HasAvailableSubCommands}}
Use "{{.CommandPath}} [command] --help" for more information about a command.{{end}}
`

var (
	start         string
	end           string
	from          string
	add           string
	sub           string
	noNewline     bool
	readFromStdin bool
	usageMsg      string

	rootCmd = &cobra.Command{
		Use:     "dtdiff",
		Version: dtdiff.PgmVersion,
		Short:   "dtdiff: output the difference between date, time or duration",
		Run: func(cmd *cobra.Command, args []string) {
			if (len(start) > 0 && len(end) > 0) || readFromStdin {
				computeStartEnd(start, end)
				return
			}
			if len(from) > 0 && len(add) > 0 {
				computeAddSub(from, add, 0)
				return
			}
			if len(from) > 0 && len(sub) > 0 {
				computeAddSub(from, sub, 1)
				return
			}
			fmt.Fprintln(os.Stderr, usageMsg)
			os.Exit(0)
		},
	}
)

// FlagUsagesCustom customized to filter and format flags with types
// this function was generated by ChatGPT and then manually refined
func FlagUsagesCustom(flags *pflag.FlagSet, names ...string) string {
	var buf bytes.Buffer
	flags.VisitAll(func(flag *pflag.Flag) {
		for _, name := range names {
			if flag.Name == name {
				shorthand := ""
				if flag.Shorthand != "" {
					shorthand = fmt.Sprintf("-%s, ", flag.Shorthand)
				}
				name := flag.Name
				if flag.Value.Type() == "string" {
					name += " string"
				}
				tabs := "\t"
				if len(name) <= 7 {
					tabs = "\t\t"
				}
				fmt.Fprintf(&buf, "  %s--%s%s%s\n", shorthand, name, tabs, flag.Usage)
			}
		}
	})
	return buf.String()
}

func main() {
	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}

func init() {
	rootCmd.PersistentFlags().StringVarP(&start, "start", "s", "", "start date, time, or a datetime")
	rootCmd.PersistentFlags().StringVarP(&end, "end", "e", "", "end date, time, or a datetime")
	rootCmd.PersistentFlags().StringVarP(&from, "from", "F", "", "a base date, time or datetime to use with -A or -S")
	rootCmd.PersistentFlags().StringVarP(&add, "add", "A", "", "add: a duration to use with -F, such as '1 day 2 hours 3 seconds'")
	rootCmd.PersistentFlags().StringVarP(&sub, "sub", "S", "", "subtract: a duration to use with -F, such as '5 months 4 weeks 3 days'")
	rootCmd.PersistentFlags().BoolVarP(&noNewline, "nonewline", "n", false, "do not output a newline character")
	rootCmd.PersistentFlags().BoolVarP(&readFromStdin, "stdin", "i", false, "read from STDIN instead of using -s/-e")
	rootCmd.MarkFlagsRequiredTogether("start", "end")
	rootCmd.MarkFlagsMutuallyExclusive("add", "sub")
	rootCmd.MarkFlagsMutuallyExclusive("stdin", "start")
	rootCmd.MarkFlagsMutuallyExclusive("stdin", "end")
	rootCmd.MarkFlagsMutuallyExclusive("stdin", "from")
	rootCmd.MarkFlagsMutuallyExclusive("stdin", "add")
	rootCmd.MarkFlagsMutuallyExclusive("stdin", "sub")
	rootCmd.MarkFlagsMutuallyExclusive("from", "start")
	rootCmd.MarkFlagsMutuallyExclusive("from", "end")
	rootCmd.MarkFlagsMutuallyExclusive("add", "start")
	rootCmd.MarkFlagsMutuallyExclusive("add", "end")
	rootCmd.MarkFlagsMutuallyExclusive("sub", "start")
	rootCmd.MarkFlagsMutuallyExclusive("sub", "end")

	versionTemplate := fmt.Sprintf("%s v%s\n%s\n", dtdiff.PgmName, dtdiff.PgmVersion, dtdiff.PgmUrl)
	rootCmd.SetVersionTemplate(versionTemplate)
	// Register the custom template function
	cobra.AddTemplateFunc("FlagUsagesCustom", func(flags *pflag.FlagSet, names ...string) string {
		return FlagUsagesCustom(flags, names...)
	})

	// Set the custom usage template
	rootCmd.SetUsageTemplate(usageTemplate)
	usageMsg = rootCmd.UsageString()
}

// either read one line containing a comma, then split start and end on this
// or read two lines with start on line one and end on line two
func getInput() (string, string) {
	input := bufio.NewScanner(os.Stdin)
	input.Scan()
	line := input.Text()
	if strings.Contains(line, ",") {
		split := strings.Split(line, ",")
		if len(split) != 2 {
			fmt.Fprintf(os.Stderr, "invalid stdin input: %s\n", line)
			os.Exit(1)
		}
		return split[0], split[1]
	}
	input.Scan()
	end := input.Text()
	return line, end
}

// computeStartEnd used when -s and -e is given
func computeStartEnd(start, end string) {
	if readFromStdin {
		start, end = getInput()
	}

	dt := dtdiff.New(start, end)
	format, _, err := dt.DtDiff()
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	if noNewline {
		fmt.Print(format)
	} else {
		fmt.Println(format)
	}
}

// computeAddSub used when -F is given along with
// add or subtract a duration from "from"
// index 0 = add; index = 1 = sub
func computeAddSub(from, period string, index int) {
	format := ""
	var err error
	if index == 0 {
		format, err = dtdiff.Add(from, period)
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			os.Exit(1)
		}
	} else {
		format, err = dtdiff.Sub(from, period)
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			os.Exit(1)
		}
	}

	if noNewline {
		fmt.Print(format)
	} else {
		fmt.Println(format)
	}
}
